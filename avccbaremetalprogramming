#define VEHICLE_TIMEOUT   2000
#define AXLE_DEBOUNCE_MS   200

volatile unsigned long axleCount = 0;
volatile unsigned long lastAxleTrigger = 0;

unsigned long vehicleStartTime = 0;
unsigned long lastActivityTime = 0;
bool vehicleInProgress = false;

bool heightTriggered[11] = {false};

// Pins
#define AXLE_SENSOR_PIN 2
const int heightSensorPins[10] = {3,4,5,6,7,8,9,10,11,12};

void setup() {
  // Axle sensor input (PD2 / INT0)
  DDRD &= ~(1 << PD2); 
  PORTD |= (1 << PD2);   // enable pull-up

  // Height sensors input (PD3–PD7, PB0–PB4)
  DDRD &= ~((1 << PD3)|(1 << PD4)|(1 << PD5)|(1 << PD6)|(1 << PD7));
  DDRB &= ~((1 << PB0)|(1 << PB1)|(1 << PB2)|(1 << PB3)|(1 << PB4));
  PORTD |= (1 << PD3)|(1 << PD4)|(1 << PD5)|(1 << PD6)|(1 << PD7);
  PORTB |= (1 << PB0)|(1 << PB1)|(1 << PB2)|(1 << PB3)|(1 << PB4);

  // Serial
  Serial.begin(115200);
  Serial.println("System Initialized...");

  // External interrupt for axle (falling edge on INT0)
  EICRA |= (1 << ISC01);  
  EIMSK |= (1 << INT0);
  sei();
}

void loop() {
  unsigned long now = millis();

  // Update height sensors continuously
  updateHeightSensors();

  // Vehicle finished condition
  if (vehicleInProgress && (now - lastActivityTime > VEHICLE_TIMEOUT)) {
    if (axleCount == 0) {
      // Height triggered but no axle yet → wait one more timeout window
      if (now - vehicleStartTime < (2 * VEHICLE_TIMEOUT)) {
        return; // keep waiting
      }
    }
    finalizeVehicle();
  }
}

// =======================
// Axle sensor interrupt
// =======================
ISR(INT0_vect) {
  unsigned long now = millis();
  if (now - lastAxleTrigger > AXLE_DEBOUNCE_MS) {
    axleCount++;
    Serial.print("Axle detected -> Count: ");
    Serial.println(axleCount);

    if (!vehicleInProgress) {
      vehicleInProgress = true;
      vehicleStartTime = now;
    }

    lastAxleTrigger = now;
    lastActivityTime = now;
  }
}

// =======================
// Height sensor scanner
// =======================
void updateHeightSensors() {
  uint8_t portD = PIND;
  for (int i = 3; i <= 7; i++) {
    if (!(portD & (1 << i))) {   // active low
      int level = i - 2;         // levels 1..5
      heightTriggered[level] = true;
      lastActivityTime = millis();
      if (!vehicleInProgress) {
        vehicleInProgress = true;
        vehicleStartTime = millis();
      }
    }
  }

  uint8_t portB = PINB;
  for (int i = 0; i <= 4; i++) {
    if (!(portB & (1 << i))) {   // active low
      int level = i + 6;         // levels 6..10
      heightTriggered[level] = true;
      lastActivityTime = millis();
      if (!vehicleInProgress) {
        vehicleInProgress = true;
        vehicleStartTime = millis();
      }
    }
  }
}

// =======================
// Finalize vehicle detection
// =======================
void finalizeVehicle() {
  // Compute max height
  int maxLevel = 0;
  for (int i = 1; i <= 10; i++) {
    if (heightTriggered[i] && i > maxLevel) {
      maxLevel = i;
    }
  }
  int vehicleHeight = levelToHeight(maxLevel);

  // Classify
  String vehicleType = classifyVehicle(axleCount, vehicleHeight);

  // Output
  Serial.print("|AA|");
  Serial.print(axleCount);
  Serial.print("|");
  Serial.print(vehicleHeight);
  Serial.print("|");
  Serial.print(vehicleType);
  Serial.println("|FF|");

  // Reset state
  axleCount = 0;
  vehicleInProgress = false;
  vehicleStartTime = 0;
  lastActivityTime = 0;
  memset(heightTriggered, 0, sizeof(heightTriggered));

  while ((PIND & (1 << PD2)) == 0) {
    delay(5);
  }
}

int levelToHeight(int level) {
  static const int heightMap[11] = {
    0, 1400, 1520, 1650, 1780, 1910,
    2030, 2150, 2280, 2400, 2550
  };
  if (level >= 1 && level <= 10) return heightMap[level];
  return 0;
}

String classifyVehicle(int axles, int height) {
  // Case: no axles but height detected
  if (axles == 0 && height > 0) {
    if (height <= 1400) return "Car?";
    else if (height <= 1650) return "SUV?";
    else if (height <= 2030) return "MiniBus?";
    else if (height <= 2400) return "Bus?";
    else return "Tall Vehicle?";
  }

  // Case: axle(s) but no height
  if (axles > 0 && height == 0) {
    if (axles == 1) return "Bike/Car?";
    else if (axles == 2) return "Car/Van?";
    else if (axles == 3) return "Truck?";
    else return "MAV?";
  }

  // Axle + height combinations
  if (axles == 1) {
    if (height <= 1400) return "Car";
    else if (height <= 1650) return "SUV";
    else return "MiniBus";
  }
  if (axles == 2) {
    if (height <= 1400) return "Car";
    else if (height <= 1650) return "SUV";
    else if (height <= 2030) return "MiniBus";
    else if (height <= 2400) return "Bus";
    else return "Tractor";
  }
  if (axles == 3) {
    if (height <= 2030) return "Bus";
    else return "Truck";
  }
  if (axles >= 4) return "MAV";

  return "Unknown";
}
